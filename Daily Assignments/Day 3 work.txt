namespace ShoppingApp_New
{
    internal class Program
    {
        static int Main(string[] args)
        {
            int num1 = 0;
            try
            {
                Console.WriteLine("Please enter a number");
                num1 = Convert.ToInt32(Console.ReadLine());
                int num2 = 100;
                num2 = num2 / num1;
                Console.WriteLine($"The result is {num2}");
                return 1;
            }
            catch (ArithmeticException e)
            {
                Console.WriteLine("There is an arthmatical problem");
                Console.WriteLine(e.Message);
            }
            catch (FormatException e)
            {
                Console.WriteLine("The input was not a number.");
                Console.WriteLine(e.Message);
            }
            catch (Exception e)
            {
                Console.WriteLine("Oops something went wrong");
                Console.WriteLine(e.StackTrace);
            }
            finally
            {
                Console.WriteLine("Connection closed");
            }
            Console.WriteLine("Hello, World!");
            return 0;
        }
    }
}


using ShoppingLibrary;

namespace ShoppingApp_New
{
    internal class Program
    {
        static void Main(string[] args)
        {

            Console.WriteLine("Hello, World!");
        }
    }
}



namespace ShoppingLibrary
{
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public float Price { get; set; }
        public string Picture { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public double Rating { get; set; }
        public float Discount { get; set; }
        public Product()
        {
            Price = 0.0f;
            Discount = 0.5f;
            Quantity = 1;
            Rating = 0;
        }
        /// <summary>
        /// Construct the product objects with the essential properties
        /// </summary>
        /// <param name="id">Product Id</param>
        /// <param name="name">Name of the Product</param>
        /// <param name="quantity">Product quantity</param>
        /// <param name="price">Price of the Product in Rs</param>
        /// <param name="picture">Picture of the Product</param>
        /// <param name="description">Describe the Product Details</param>
        /// <param name="rating">Rate the Product</param>
        /// <param name="discount">Discount (%) given for Product</param>
        public Product(int id, string name, int quantity, float price, string picture, string description, double rating, float discount)
        {
            Id = id;
            Name = name;
            Quantity = quantity;
            Price = price;
            Picture = picture;
            Description = description;
            Rating = rating;
            Discount = discount;
        }
        public override string ToString()
        {
            float netPrice = Price - (Price * Discount / 100);
            return $"Product Id : {Id}\nProduct Name : {Name}\nProduct Price : Rs. {Price}\nProduct Quantity In Hand : {Quantity}" +
                $"\nDiscount offered : {Discount}%\nRating : {Rating}\nNet Price : {netPrice}";
        }
    }
}




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ShoppingLibrary;

namespace ProductLibrary
{
    public interface IRepository
    {
        public Product Add(Product product);
        public Product Update(Product product);
        public Product Delete(int id);
        public Product GetById(int id);
        public List<Product> GetAll();
    }
}



using ShoppingLibrary;

namespace ProductLibrary
{
    public class ProductRepository : IRepository
    {
        Dictionary<int, Product> products = new Dictionary<int, Product>();
        /// <summary>
        /// Adds the given product to the dictionary 
        /// </summary>
        /// <param name="product">Product object that has to be added</param>
        /// <returns>The product that has been added</returns>
        public Product Add(Product product)
        {
            int id = GetTheNextId();
            try
            {
                products.Add(product.Id, product);
                return product;
            }
            catch (ArgumentException e)
            {
                Console.WriteLine("The product Id already exists");
                Console.WriteLine(e.Message);
            }
            return null;

        }

        private int GetTheNextId()
        {
            if (products.Count == 0)
                return 1;
            int id = products.Keys.Max();
            return ++id;
        }

        /// <summary>
        /// Deletes the product from the dictionary using the id as key
        /// </summary>
        /// <param name="id">The Id of the product to be deleted</param>
        /// <returns>The deleted product</returns>
        public Product Delete(int id)
        {
            products.Remove(id);
            return products[id];
        }
        /// <summary>
        /// List all the products
        /// </summary>
        /// <returns>productlist</returns>
        public List<Product> GetAll()
        {
            var productList = products.Values.ToList();
            return productList;
        }
        /// <summary>
        /// get product by its id
        /// </summary>
        /// <param name="id">product id</param>
        /// <returns>all products id</returns>
        public Product GetById(int id)
        {
            return products[id];
        }
        /// <summary>
        /// update the product 
        /// </summary>
        /// <param name="product">product has to be updated by its id</param>
        /// <returns>updated product</returns>
        public Product Update(Product product)
        {
            products[product.Id] = product;
            return products[product.Id];
        }
    }
}



using ShoppingLibrary;
using ProductLibrary;


namespace ShoppingBLLibrary
{
    public interface IProductServices
    {
        public Product Add(Product product);
        public Product UpdateProductPrice(int id , float price);
        public Product UpdateProductQuantity(int id, int quantity, string action);
        public Product GetProduct(int id);
        public List<Product> GetProducts();
        public Product Delete(int id);
    }

}


using ShoppingDALLibrary;
using ShoppingModelLibrary;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShoppingBLLibrary
{
    public class ProductService : IProductService
    {
        IRepository repository;
        public ProductService()
        {
            repository =  new ProductRepository();
        }
        /// <summary>
        /// Adds the product to the collection using the repository
        /// </summary>
        /// <param name="product">The product to be added</param>
        /// <returns></returns>
        /// <exception cref="NotAddedException">Product Id duplicated</exception>
        public Product AddProduct(Product product)
        {
            var result = repository.Add(product);
            if(result != null) 
                return result;
            throw new NotAddedException();
        }

        public Product Delete(int id)
        {
            var product = GetProduct(id);
            if (product != null)
            {
                repository.Delete(id);
                return product; 
            }
            throw new NoSuchProductException();
        }
        /// <summary>
        /// Returns the product for teh given Id
        /// </summary>
        /// <param name="id">Id of the product to be returned</param>
        /// <returns></returns>
        /// <exception cref="NoSuchProductException">No product with the given Id</exception>
        public Product GetProduct(int id)
        {
            var result = repository.GetById(id);
            //if (result != null) 
            //    return result;
            //throw new NoSuchProductException();

            //null collasing operator
            //return result ?? throw new NoSuchProductException();

            return result == null ? throw new NoSuchProductException() : result;
        }

        public List<Product> GetProducts()
        {
            var products = repository.GetAll();
            if(products.Count != 0)
               return products;
            throw new NoProductsAvailableException();
        }

        public Product UpdateProductPrice(int id, float price)
        {
            var product = GetProduct(id);
            if(product != null)
            {
                product.Price = price;
                var result = repository.Update(product);
                return result;
            }
            throw new NoSuchProductException();
        }

        public Product UpdateProductQuantity(int id, int quantity, string action)
        {
            var product = GetProduct(id);
            if (product != null)
            {
                if (action == "add")
                {
                    product.Quantity += quantity;
                }
                else if (action == "remove")
                {
                    product.Quantity -= quantity;
                }
                else
                    throw new InValidUpdateActionException();
                var result = repository.Update(product);
                return result;
            }
            throw new NoSuchProductException();
        }
    }
}



using System.Runtime.Serialization;

namespace ShoppingBLLibrary
{
    [Serializable]
    public class InValidUpdateActionException : Exception
    {
        string message;
        public InValidUpdateActionException()
        {
            message = "The action you have specified is not valid";
        }
        public override string Message => message;

    }
}
--------------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace ShoppingBLLibrary
{
    [Serializable]
    public class NoProductsAvailableException : Exception
    {
        string message;
        public NoProductsAvailableException()
        {
            message = "No products are available currently";
        }

        public override string Message => message;
    }
}

--------------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace ShoppingBLLibrary
{
    [Serializable]
    public class NoSuchProductException : Exception
    {
        string message;
        public NoSuchProductException()
        {
            message = "The product with teh given id is not present";
        }
        public override string Message => message;


    }
}

--------------------------------------------------------------------------------------

using System.Runtime.Serialization;

namespace ShoppingBLLibrary
{
    [Serializable]
    public class NotAddedException : Exception
    {
        string message;
        public NotAddedException()
        {
            message = "Product was not addedd.";
        }
        public override string Message => message;

    }
}
